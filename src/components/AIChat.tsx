import React, { useState } from 'react';
import { PersonalData } from '../types/PersonalData';
import { MessageSquare, Send, Bot, User, Sparkles } from 'lucide-react';

interface AIChatProps {
  personalData: PersonalData;
}

interface Message {
  id: string;
  sender: 'user' | 'ai';
  content: string;
  timestamp: Date;
}

export const AIChat: React.FC<AIChatProps> = ({ personalData }) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      sender: 'ai',
      content: `Ol√° ${personalData.name}! Sou sua IA Nutricional personalizada. Posso ajudar com d√∫vidas sobre alimenta√ß√£o, receitas saud√°veis, substitui√ß√µes de ingredientes e muito mais. Como posso te ajudar hoje?`,
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  const predefinedAnswers: { [key: string]: string } = {
    'tapioca': 'A tapioca √© uma excelente op√ß√£o! √â rica em carboidratos complexos e tem baixo √≠ndice glic√™mico. √Ä noite, se seu objetivo √© perder gordura, consuma com modera√ß√£o (1 tapioca pequena) e combine com prote√≠na magra como queijo cottage ou peito de peru.',
    'shake': 'Receita de shake caseiro para ganho de massa:\n\nü•§ Shake Proteico:\n‚Ä¢ 1 banana\n‚Ä¢ 200ml de leite\n‚Ä¢ 1 scoop de whey protein\n‚Ä¢ 1 colher de aveia\n‚Ä¢ 1 colher de pasta de amendoim\n‚Ä¢ Gelo a gosto\n\nBata tudo no liquidificador. Rende ~400 kcal e 35g de prote√≠na!',
    '√°gua': 'A hidrata√ß√£o √© fundamental! Recomendo:\n\nüíß Quantidade di√°ria: 35ml por kg de peso corporal\nüíß Para voc√™: aproximadamente 2,5-3L por dia\nüíß Beba 1 copo ao acordar\nüíß 1 copo antes de cada refei√ß√£o\nüíß Aumente a ingest√£o durante exerc√≠cios',
    'carboidrato': 'Os carboidratos s√£o essenciais! Para seu objetivo:\n\n‚úÖ Melhores fontes:\n‚Ä¢ Aveia, quinoa, batata doce\n‚Ä¢ Arroz integral, banana\n‚Ä¢ Frutas em geral\n\n‚è∞ Timing ideal:\n‚Ä¢ Manh√£: carboidratos complexos\n‚Ä¢ Pr√©-treino: carboidratos simples\n‚Ä¢ P√≥s-treino: carboidratos + prote√≠na',
    'prote√≠na': 'Protein intake para seu objetivo:\n\nü•© Recomenda√ß√£o: 1,6-2,2g por kg de peso\nü•© Para voc√™: ~150-200g por dia\n\n‚úÖ Melhores fontes:\n‚Ä¢ Peito de frango, peixe, ovos\n‚Ä¢ Whey protein, case√≠na\n‚Ä¢ Feij√µes, lentilha, quinoa\n\n‚è∞ Distribua ao longo do dia em 4-6 refei√ß√µes'
  };

  const generateAIResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    // Check for keywords in predefined answers
    for (const [keyword, answer] of Object.entries(predefinedAnswers)) {
      if (message.includes(keyword)) {
        return answer;
      }
    }
    
    // Default responses based on goal
    if (message.includes('perder peso') || message.includes('emagrecer')) {
      return `Para perder peso de forma saud√°vel, ${personalData.name}, recomendo:\n\nüî• D√©ficit cal√≥rico moderado (300-500 kcal)\nüî• Priorize prote√≠nas magras\nüî• Inclua fibras em todas as refei√ß√µes\nüî• Mantenha-se hidratado\nüî• Pratique exerc√≠cios regularmente\n\nLembre-se: a consist√™ncia √© mais importante que a perfei√ß√£o!`;
    }
    
    if (message.includes('ganhar massa') || message.includes('m√∫sculo')) {
      return `Para ganhar massa muscular, ${personalData.name}:\n\nüí™ Super√°vit cal√≥rico controlado (+300 kcal)\nüí™ Prote√≠na: 2g por kg de peso\nüí™ Carboidratos no pr√© e p√≥s-treino\nüí™ Treine com pesos regularmente\nüí™ Durma 7-9 horas por noite\n\nPaci√™ncia e consist√™ncia s√£o fundamentais!`;
    }
    
    if (message.includes('quando comer') || message.includes('hor√°rio')) {
      return `Timing nutricional otimizado:\n\nüåÖ Caf√© da manh√£: 30min ap√≥s acordar\nüåû Almo√ßo: 4-5h ap√≥s caf√© da manh√£\nüåÜ Lanche: 3-4h ap√≥s almo√ßo\nüåô Jantar: 3-4h antes de dormir\n\nüí° Dica: Mantenha intervalos regulares entre as refei√ß√µes para estabilizar o metabolismo!`;
    }
    
    // Generic helpful response
    return `√ìtima pergunta, ${personalData.name}! Com base no seu objetivo de ${personalData.goal === 'lose_weight' ? 'perder peso' : personalData.goal === 'gain_muscle' ? 'ganhar massa muscular' : 'manter o peso'}, posso te dar orienta√ß√µes mais espec√≠ficas.\n\nPoderia me dar mais detalhes sobre sua d√∫vida? Por exemplo:\n‚Ä¢ Sobre que alimento espec√≠fico?\n‚Ä¢ Em que hor√°rio do dia?\n‚Ä¢ Contexto da sua rotina?\n\nAssim posso te ajudar melhor! üòä`;
  };

  const handleSendMessage = () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      sender: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate AI response delay
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        sender: 'ai',
        content: generateAIResponse(inputMessage),
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const quickQuestions = [
    "Posso comer tapioca √† noite?",
    "Qual shake caseiro voc√™ recomenda?",
    "Quanto de √°gua devo beber?",
    "Quando devo comer carboidratos?",
    "Quanta prote√≠na preciso por dia?"
  ];

  return (
    <div className="space-y-6">
      <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
        <div className="flex items-center gap-3 mb-4">
          <div className="p-2 bg-purple-500 rounded-xl">
            <Bot className="w-6 h-6 text-white" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-white">IA Nutricional Personalizada</h3>
            <p className="text-gray-300 text-sm">Assistente inteligente para suas d√∫vidas sobre alimenta√ß√£o</p>
          </div>
        </div>

        {/* Quick Questions */}
        <div className="mb-6">
          <h4 className="text-sm font-medium text-gray-300 mb-3">Perguntas R√°pidas:</h4>
          <div className="flex flex-wrap gap-2">
            {quickQuestions.map((question, index) => (
              <button
                key={index}
                onClick={() => {
                  setInputMessage(question);
                  setTimeout(() => handleSendMessage(), 100);
                }}
                className="px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-sm text-gray-300 hover:bg-white/20 transition-all"
              >
                {question}
              </button>
            ))}
          </div>
        </div>

        {/* Chat Messages */}
        <div className="bg-white/5 rounded-xl p-4 h-96 overflow-y-auto mb-4 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex gap-3 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`flex gap-3 max-w-[80%] ${message.sender === 'user' ? 'flex-row-reverse' : ''}`}>
                <div className={`p-2 rounded-xl ${message.sender === 'user' ? 'bg-blue-500' : 'bg-purple-500'}`}>
                  {message.sender === 'user' ? (
                    <User className="w-5 h-5 text-white" />
                  ) : (
                    <Bot className="w-5 h-5 text-white" />
                  )}
                </div>
                <div className={`p-4 rounded-xl ${message.sender === 'user' ? 'bg-blue-500/20 border border-blue-500/30' : 'bg-purple-500/20 border border-purple-500/30'}`}>
                  <p className="text-white text-sm whitespace-pre-line">{message.content}</p>
                  <p className="text-gray-400 text-xs mt-2">
                    {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </p>
                </div>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex gap-3 justify-start">
              <div className="p-2 bg-purple-500 rounded-xl">
                <Bot className="w-5 h-5 text-white" />
              </div>
              <div className="p-4 bg-purple-500/20 border border-purple-500/30 rounded-xl">
                <div className="flex items-center gap-2">
                  <Sparkles className="w-4 h-4 text-purple-400 animate-pulse" />
                  <span className="text-gray-300 text-sm">IA est√° digitando...</span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Input Area */}
        <div className="flex gap-3">
          <input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="Digite sua pergunta sobre nutri√ß√£o..."
            className="flex-1 px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-400 transition-all"
          />
          <button
            onClick={handleSendMessage}
            disabled={!inputMessage.trim() || isTyping}
            className="px-4 py-3 bg-gradient-to-r from-purple-500 to-blue-500 rounded-xl text-white font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:from-purple-600 hover:to-blue-600 transition-all"
          >
            <Send className="w-5 h-5" />
          </button>
        </div>
      </div>
    </div>
  );
};